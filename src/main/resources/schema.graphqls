type Query {
    metroline(token: ID!): Metroline
}

type Mutation {
    addComment(comment: CommentInput): Comment
}

type Comment {
    value: String
    date: OffsetDateTime
}


input CommentInput {
    value: String
    date: OffsetDateTime
}

scalar OffsetDateTime

type  Metroline {
    stations: [AbstractStation]
    terminal: Terminal
}

union Terminal = SupportTerminal | SwapTermial

type SwapTermial {
    creationDate: DateTime
}

type SupportTerminal {
    creationDate: DateTime
    type: RequestType
}

enum RequestType {
    ADMIN, TECHNICAL
}

type  Station {
    id: String
    date: DateTime
    state: StationState
    stateId: String
    focus: Boolean
    content: StationContent
}

type  AccordionStation {
    id: String
    date: DateTime
    state: StationState
    stateId: String
    focus: Boolean
    content: StationContent
    collapsed: Boolean
}

union AbstractStation = Station | AccordionStation

enum StationState {
    SOON, DONE, ERROR
}

scalar DateTime

union StationContent = SwapCreation | SupportCreation | Treatment | Solution | Feedback | Delivery | Return

type Return {
    method: ReturnMethod
    products: [String]
    status: ReturnStatus
    reference: String
    deadLine: DateTime
}

enum ReturnStatus {
    TO_BE_RETURNED
    RETURNED
    NOT_RETURNED
    COMPLETED
}

enum ReturnMethod {
    SHOP
    LOGISTICS_PARTNER
    TECHNICIAN
}

type Delivery {
    date: DateTime
    products: [String]
    carrier: String
    method: DeliveryMethod
    status: DeliveryStatus
}

enum DeliveryStatus {
    IN_PREPARATION
    IN_STOCK
    SHIPPED
    DELIVERED

}

enum DeliveryMethod {
    LOCKER
    PICKUP
    HOME
}

type Feedback {
    status: FeedbackStatus!
    comment: Comment
}

type Comment {
    date: DateTime
    value: String
}

enum FeedbackStatus {
    ACCEPTED, AUTO_ACCEPTED, REJECTED, WAITING
}

type Solution {
    solutionCode: String
    creditNoteAmount: String
    creditNoteId: String
}

type Treatment {
    status: TreatmentStatus
    repairDate: DateTime
}

enum TreatmentStatus {
    DELAY, INWAIT
}

type SwapCreation {
    orderId: String
    products: [String]
}

type SupportCreation {
    requestId: String
    channel: String
    phoneNumber: String
    customerId: String
}

